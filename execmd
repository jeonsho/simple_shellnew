
 *execmd - Execute a command with arguments.
 *@argv: Array of arguments including the command.
 *@executable: Name of the executable file.
 *@indecs: Index of the current command.
 *Return: The status of the command execution.
 */
int execmd(char **argv, char *executable, int indecs)
{
	char *command = NULL, *actual_command = NULL;
	int status = 0;

	if (argv != NULL)
	{
		command = argv[0];
		actual_command = get_location(command);
		if ((actual_command != NULL) && (_strcmp(actual_command, "exit") != 0))
		{
			pid_t pid = fork();
			if (pid == -1)
			{
				free(actual_command);
				cleanup_memory(NULL, NULL, argv);
				exit(1);
			}
			else if (pid == 0)
			{
				if (_strcmp(actual_command, "/bin/env") != 0)
				{
					if (execve(actual_command, argv, environ) == -1)
					{
						free(actual_command);
					cleanup_memory(NULL, NULL, argv);
						exit(errno); }
				}
				else
				{
					builtin_env();
					free(actual_command);
					cleanup_memory(NULL, NULL, argv);
					exit(0);
				}
			}
			else
			{
				if (waitpid(pid, &status, 0) == -1)
				{
					cleanup_memory(NULL, NULL, argv);
					free(actual_command);
					exit(1); }
			}
		}
                else if ((actual_command != NULL) && (_strcmp(actual_command, "exit") == 0))
                {
			
                        cleanup_memory(NULL,NULL, argv);
                        free(actual_command);
                        exit(0);
                }
                else
                {
                        print_command_not_found_error(executable, command, indecs);
                        cleanup_memory(NULL,NULL, argv);
                        free(actual_command);
                        exit(127);
                }
        }
          cleanup_memory(NULL,NULL, argv);
                        free(actual_command);
        return (status);
}
