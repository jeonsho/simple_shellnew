#include "main.h"
/**
 *my_main - Simple shell program that reads commands, tokenizes them, and executes.
 *@ac: The number of command line arguments.
 *@arg: An array containing the command line arguments.
 *Return: If the program exits successfully, it returns EXIT_SUCCESS;
 *        otherwise, it returns EXIT_FAILURE.
 */
int main(int ac, char **arg)
{
	char *executable = arg[0];
	char *lineptr = NULL, *lineptr_copy =NULL ;
	size_t n = 0;
	int status = 0;
	char **argv;
	ssize_t nchars_read;
	(void) ac;
	signal(SIGINT, handler);

	while (1)
	{
		if (isatty(STDIN_FILENO))
			write(STDOUT_FILENO, "& ", 2);

		nchars_read = getline(&lineptr, &n, stdin);

		if (nchars_read == -1)
			exit(0);
        lineptr_copy = malloc(sizeof(char) * nchars_read);
        if (lineptr_copy == NULL)
        {
             fprintf(stderr , "memory error ");
            exit(127);

        }
		if (!is_empty(lineptr))
		{
		 if (my_tokenize_input(lineptr,lineptr_copy, &argv) == 0) {

	fprintf(stderr ,"lineptr %s and copy is %ld" ,argv[2],sizeof(argv));	
	 		 status = execmd(argv,executable);
		
	 		 cleanup_memory(lineptr, lineptr_copy, argv);
                if (status != 0) {
                    exit(errno);
                }
            }
		}

		if (isatty(STDIN_FILENO))
			write(STDOUT_FILENO, "& ", 2);
	}

cleanup_memory(lineptr, lineptr_copy, NULL);

	return 0;
}

void handler(int signum)
{
	(void) signum;
	signal(SIGINT, handler);
	write(STDOUT_FILENO, "\n &", 3);
}

void cleanup_memory(char *lineptr, char *lineptr_copy, char **argv)
{
	int i;

	free(lineptr);
	free(lineptr_copy);

	if (argv != NULL)
	{
		for (i = 0; argv[i] != NULL; i++)
		{
			free(argv[i]);
		}

		free(argv);
	}
}
